/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreateVideoArgs } from "./CreateVideoArgs";
import { UpdateVideoArgs } from "./UpdateVideoArgs";
import { DeleteVideoArgs } from "./DeleteVideoArgs";
import { VideoFindManyArgs } from "./VideoFindManyArgs";
import { VideoFindUniqueArgs } from "./VideoFindUniqueArgs";
import { Video } from "./Video";
import { VideoService } from "../video.service";

@graphql.Resolver(() => Video)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class VideoResolverBase {
  constructor(
    protected readonly service: VideoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Video",
    action: "read",
    possession: "any",
  })
  async _videosMeta(
    @graphql.Args() args: VideoFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Video])
  @nestAccessControl.UseRoles({
    resource: "Video",
    action: "read",
    possession: "any",
  })
  async videos(@graphql.Args() args: VideoFindManyArgs): Promise<Video[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Video, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Video",
    action: "read",
    possession: "own",
  })
  async video(
    @graphql.Args() args: VideoFindUniqueArgs
  ): Promise<Video | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Video)
  @nestAccessControl.UseRoles({
    resource: "Video",
    action: "create",
    possession: "any",
  })
  async createVideo(@graphql.Args() args: CreateVideoArgs): Promise<Video> {
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Video)
  @nestAccessControl.UseRoles({
    resource: "Video",
    action: "update",
    possession: "any",
  })
  async updateVideo(
    @graphql.Args() args: UpdateVideoArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Video | null> {
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Video)
  @nestAccessControl.UseRoles({
    resource: "Video",
    action: "delete",
    possession: "any",
  })
  async deleteVideo(
    @graphql.Args() args: DeleteVideoArgs
  ): Promise<Video | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
